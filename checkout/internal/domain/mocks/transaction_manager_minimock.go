package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/checkout/internal/domain.TransactionManager -o ./mocks/transaction_manager_minimock.go -n TransactionManagerMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TransactionManagerMock implements domain.TransactionManager
type TransactionManagerMock struct {
	t minimock.Tester

	funcRunRepeteableReade          func(ctx context.Context, f func(ctxTX context.Context) error) (err error)
	inspectFuncRunRepeteableReade   func(ctx context.Context, f func(ctxTX context.Context) error)
	afterRunRepeteableReadeCounter  uint64
	beforeRunRepeteableReadeCounter uint64
	RunRepeteableReadeMock          mTransactionManagerMockRunRepeteableReade
}

// NewTransactionManagerMock returns a mock for domain.TransactionManager
func NewTransactionManagerMock(t minimock.Tester) *TransactionManagerMock {
	m := &TransactionManagerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.RunRepeteableReadeMock = mTransactionManagerMockRunRepeteableReade{mock: m}
	m.RunRepeteableReadeMock.callArgs = []*TransactionManagerMockRunRepeteableReadeParams{}

	return m
}

type mTransactionManagerMockRunRepeteableReade struct {
	mock               *TransactionManagerMock
	defaultExpectation *TransactionManagerMockRunRepeteableReadeExpectation
	expectations       []*TransactionManagerMockRunRepeteableReadeExpectation

	callArgs []*TransactionManagerMockRunRepeteableReadeParams
	mutex    sync.RWMutex
}

// TransactionManagerMockRunRepeteableReadeExpectation specifies expectation struct of the TransactionManager.RunRepeteableReade
type TransactionManagerMockRunRepeteableReadeExpectation struct {
	mock    *TransactionManagerMock
	params  *TransactionManagerMockRunRepeteableReadeParams
	results *TransactionManagerMockRunRepeteableReadeResults
	Counter uint64
}

// TransactionManagerMockRunRepeteableReadeParams contains parameters of the TransactionManager.RunRepeteableReade
type TransactionManagerMockRunRepeteableReadeParams struct {
	ctx context.Context
	f   func(ctxTX context.Context) error
}

// TransactionManagerMockRunRepeteableReadeResults contains results of the TransactionManager.RunRepeteableReade
type TransactionManagerMockRunRepeteableReadeResults struct {
	err error
}

// Expect sets up expected params for TransactionManager.RunRepeteableReade
func (mmRunRepeteableReade *mTransactionManagerMockRunRepeteableReade) Expect(ctx context.Context, f func(ctxTX context.Context) error) *mTransactionManagerMockRunRepeteableReade {
	if mmRunRepeteableReade.mock.funcRunRepeteableReade != nil {
		mmRunRepeteableReade.mock.t.Fatalf("TransactionManagerMock.RunRepeteableReade mock is already set by Set")
	}

	if mmRunRepeteableReade.defaultExpectation == nil {
		mmRunRepeteableReade.defaultExpectation = &TransactionManagerMockRunRepeteableReadeExpectation{}
	}

	mmRunRepeteableReade.defaultExpectation.params = &TransactionManagerMockRunRepeteableReadeParams{ctx, f}
	for _, e := range mmRunRepeteableReade.expectations {
		if minimock.Equal(e.params, mmRunRepeteableReade.defaultExpectation.params) {
			mmRunRepeteableReade.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRunRepeteableReade.defaultExpectation.params)
		}
	}

	return mmRunRepeteableReade
}

// Inspect accepts an inspector function that has same arguments as the TransactionManager.RunRepeteableReade
func (mmRunRepeteableReade *mTransactionManagerMockRunRepeteableReade) Inspect(f func(ctx context.Context, f func(ctxTX context.Context) error)) *mTransactionManagerMockRunRepeteableReade {
	if mmRunRepeteableReade.mock.inspectFuncRunRepeteableReade != nil {
		mmRunRepeteableReade.mock.t.Fatalf("Inspect function is already set for TransactionManagerMock.RunRepeteableReade")
	}

	mmRunRepeteableReade.mock.inspectFuncRunRepeteableReade = f

	return mmRunRepeteableReade
}

// Return sets up results that will be returned by TransactionManager.RunRepeteableReade
func (mmRunRepeteableReade *mTransactionManagerMockRunRepeteableReade) Return(err error) *TransactionManagerMock {
	if mmRunRepeteableReade.mock.funcRunRepeteableReade != nil {
		mmRunRepeteableReade.mock.t.Fatalf("TransactionManagerMock.RunRepeteableReade mock is already set by Set")
	}

	if mmRunRepeteableReade.defaultExpectation == nil {
		mmRunRepeteableReade.defaultExpectation = &TransactionManagerMockRunRepeteableReadeExpectation{mock: mmRunRepeteableReade.mock}
	}
	mmRunRepeteableReade.defaultExpectation.results = &TransactionManagerMockRunRepeteableReadeResults{err}
	return mmRunRepeteableReade.mock
}

// Set uses given function f to mock the TransactionManager.RunRepeteableReade method
func (mmRunRepeteableReade *mTransactionManagerMockRunRepeteableReade) Set(f func(ctx context.Context, f func(ctxTX context.Context) error) (err error)) *TransactionManagerMock {
	if mmRunRepeteableReade.defaultExpectation != nil {
		mmRunRepeteableReade.mock.t.Fatalf("Default expectation is already set for the TransactionManager.RunRepeteableReade method")
	}

	if len(mmRunRepeteableReade.expectations) > 0 {
		mmRunRepeteableReade.mock.t.Fatalf("Some expectations are already set for the TransactionManager.RunRepeteableReade method")
	}

	mmRunRepeteableReade.mock.funcRunRepeteableReade = f
	return mmRunRepeteableReade.mock
}

// When sets expectation for the TransactionManager.RunRepeteableReade which will trigger the result defined by the following
// Then helper
func (mmRunRepeteableReade *mTransactionManagerMockRunRepeteableReade) When(ctx context.Context, f func(ctxTX context.Context) error) *TransactionManagerMockRunRepeteableReadeExpectation {
	if mmRunRepeteableReade.mock.funcRunRepeteableReade != nil {
		mmRunRepeteableReade.mock.t.Fatalf("TransactionManagerMock.RunRepeteableReade mock is already set by Set")
	}

	expectation := &TransactionManagerMockRunRepeteableReadeExpectation{
		mock:   mmRunRepeteableReade.mock,
		params: &TransactionManagerMockRunRepeteableReadeParams{ctx, f},
	}
	mmRunRepeteableReade.expectations = append(mmRunRepeteableReade.expectations, expectation)
	return expectation
}

// Then sets up TransactionManager.RunRepeteableReade return parameters for the expectation previously defined by the When method
func (e *TransactionManagerMockRunRepeteableReadeExpectation) Then(err error) *TransactionManagerMock {
	e.results = &TransactionManagerMockRunRepeteableReadeResults{err}
	return e.mock
}

// RunRepeteableReade implements domain.TransactionManager
func (mmRunRepeteableReade *TransactionManagerMock) RunRepeteableReade(ctx context.Context, f func(ctxTX context.Context) error) (err error) {
	mm_atomic.AddUint64(&mmRunRepeteableReade.beforeRunRepeteableReadeCounter, 1)
	defer mm_atomic.AddUint64(&mmRunRepeteableReade.afterRunRepeteableReadeCounter, 1)

	if mmRunRepeteableReade.inspectFuncRunRepeteableReade != nil {
		mmRunRepeteableReade.inspectFuncRunRepeteableReade(ctx, f)
	}

	mm_params := &TransactionManagerMockRunRepeteableReadeParams{ctx, f}

	// Record call args
	mmRunRepeteableReade.RunRepeteableReadeMock.mutex.Lock()
	mmRunRepeteableReade.RunRepeteableReadeMock.callArgs = append(mmRunRepeteableReade.RunRepeteableReadeMock.callArgs, mm_params)
	mmRunRepeteableReade.RunRepeteableReadeMock.mutex.Unlock()

	for _, e := range mmRunRepeteableReade.RunRepeteableReadeMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmRunRepeteableReade.RunRepeteableReadeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRunRepeteableReade.RunRepeteableReadeMock.defaultExpectation.Counter, 1)
		mm_want := mmRunRepeteableReade.RunRepeteableReadeMock.defaultExpectation.params
		mm_got := TransactionManagerMockRunRepeteableReadeParams{ctx, f}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRunRepeteableReade.t.Errorf("TransactionManagerMock.RunRepeteableReade got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRunRepeteableReade.RunRepeteableReadeMock.defaultExpectation.results
		if mm_results == nil {
			mmRunRepeteableReade.t.Fatal("No results are set for the TransactionManagerMock.RunRepeteableReade")
		}
		return (*mm_results).err
	}
	if mmRunRepeteableReade.funcRunRepeteableReade != nil {
		return mmRunRepeteableReade.funcRunRepeteableReade(ctx, f)
	}
	mmRunRepeteableReade.t.Fatalf("Unexpected call to TransactionManagerMock.RunRepeteableReade. %v %v", ctx, f)
	return
}

// RunRepeteableReadeAfterCounter returns a count of finished TransactionManagerMock.RunRepeteableReade invocations
func (mmRunRepeteableReade *TransactionManagerMock) RunRepeteableReadeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRunRepeteableReade.afterRunRepeteableReadeCounter)
}

// RunRepeteableReadeBeforeCounter returns a count of TransactionManagerMock.RunRepeteableReade invocations
func (mmRunRepeteableReade *TransactionManagerMock) RunRepeteableReadeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRunRepeteableReade.beforeRunRepeteableReadeCounter)
}

// Calls returns a list of arguments used in each call to TransactionManagerMock.RunRepeteableReade.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRunRepeteableReade *mTransactionManagerMockRunRepeteableReade) Calls() []*TransactionManagerMockRunRepeteableReadeParams {
	mmRunRepeteableReade.mutex.RLock()

	argCopy := make([]*TransactionManagerMockRunRepeteableReadeParams, len(mmRunRepeteableReade.callArgs))
	copy(argCopy, mmRunRepeteableReade.callArgs)

	mmRunRepeteableReade.mutex.RUnlock()

	return argCopy
}

// MinimockRunRepeteableReadeDone returns true if the count of the RunRepeteableReade invocations corresponds
// the number of defined expectations
func (m *TransactionManagerMock) MinimockRunRepeteableReadeDone() bool {
	for _, e := range m.RunRepeteableReadeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RunRepeteableReadeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRunRepeteableReadeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRunRepeteableReade != nil && mm_atomic.LoadUint64(&m.afterRunRepeteableReadeCounter) < 1 {
		return false
	}
	return true
}

// MinimockRunRepeteableReadeInspect logs each unmet expectation
func (m *TransactionManagerMock) MinimockRunRepeteableReadeInspect() {
	for _, e := range m.RunRepeteableReadeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TransactionManagerMock.RunRepeteableReade with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RunRepeteableReadeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRunRepeteableReadeCounter) < 1 {
		if m.RunRepeteableReadeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TransactionManagerMock.RunRepeteableReade")
		} else {
			m.t.Errorf("Expected call to TransactionManagerMock.RunRepeteableReade with params: %#v", *m.RunRepeteableReadeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRunRepeteableReade != nil && mm_atomic.LoadUint64(&m.afterRunRepeteableReadeCounter) < 1 {
		m.t.Error("Expected call to TransactionManagerMock.RunRepeteableReade")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TransactionManagerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockRunRepeteableReadeInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TransactionManagerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TransactionManagerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockRunRepeteableReadeDone()
}
